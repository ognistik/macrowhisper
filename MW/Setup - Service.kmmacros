<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>766159660.83051395</real>
		<key>CustomIconData</key>
		<string>KMEP-GenericApplication-/Applications/superwhisper.app</string>
		<key>DisplayInMenuBar</key>
		<dict>
			<key>Display</key>
			<true/>
			<key>IconType</key>
			<string>No</string>
			<key>IncludeAllMacros</key>
			<false/>
			<key>IncludeMacroIcons</key>
			<true/>
			<key>TitleType</key>
			<string>Variable</string>
			<key>TitleVariable</key>
			<string>sw_menubar</string>
		</dict>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionUID</key>
						<integer>15612079</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Comment</string>
						<key>StyledText</key>
						<data>
						cnRmZAAAAAADAAAAAgAAAAcAAABU
						WFQucnRmAQAAAC4+AgAAKwAAAAEA
						AAA2AgAAe1xydGYxXGFuc2lcYW5z
						aWNwZzEyNTJcY29jb2FydGYyODIy
						Clxjb2NvYXRleHRzY2FsaW5nMFxj
						b2NvYXBsYXRmb3JtMHtcZm9udHRi
						bFxmMFxmc3dpc3NcZmNoYXJzZXQw
						IEhlbHZldGljYTt9CntcY29sb3J0
						Ymw7XHJlZDI1NVxncmVlbjI1NVxi
						bHVlMjU1O1xyZWQwXGdyZWVuMFxi
						bHVlMDt9CntcKlxleHBhbmRlZGNv
						bG9ydGJsOztcY3NzcmdiXGMwXGMw
						XGMwXGM4NDcwNlxjbmFtZSBjb250
						cm9sVGV4dENvbG9yO30KXHBhcmRc
						dHg1NjBcdHgxMTIwXHR4MTY4MFx0
						eDIyNDBcdHgyODAwXHR4MzM2MFx0
						eDM5MjBcdHg0NDgwXHR4NTA0MFx0
						eDU2MDBcdHg2MTYwXHR4NjcyMFxw
						YXJkaXJuYXR1cmFsXHBhcnRpZ2h0
						ZW5mYWN0b3IwCgpcZjBcZnMyNiBc
						Y2YyIFBsZWFzZSBtYWtlIHN1cmUg
						dGhhdCB5b3UgaGF2ZSBpbnN0YWxs
						ZWQgRlNXYXRjaCBgYnJldyBpbnN0
						YWxsIGZzd2F0Y2hgIGJlZm9yZSBy
						dW5uaW5nIHRoaXMgbWFjcm8uIEFs
						c28gbWFrZSBzdXJlIHRoYXQgeW91
						IGhhdmUgc2V0IHRoZSBjb3JyZWN0
						IHBhdGhzIGluIHRoZSBvcmFuZ2Ug
						Y29sb3ItY29kZWQgZmllbGRzIGJl
						bG93Ln0BAAAAIwAAAAEAAAAHAAAA
						VFhULnJ0ZhAAAAAoYf1ntgEAAAAA
						AAAAAAAA
						</data>
						<key>Title</key>
						<string>About</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>15620853</integer>
						<key>IsActive</key>
						<false/>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>%TriggerValue%</string>
						<key>Variable</key>
						<string>localInput</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Macro Group Version Check</string>
						<key>ActionUID</key>
						<integer>15620854</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ConditionType</key>
									<string>Variable</string>
									<key>Variable</key>
									<string>localInput</string>
									<key>VariableConditionType</key>
									<string>Is</string>
									<key>VariableValue</key>
									<string>versionCheck</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>ElseActions</key>
						<array>
							<dict>
								<key>ActionUID</key>
								<integer>15620856</integer>
								<key>Conditions</key>
								<dict>
									<key>ConditionList</key>
									<array>
										<dict>
											<key>ConditionType</key>
											<string>Variable</string>
											<key>Variable</key>
											<string>localInput</string>
											<key>VariableConditionType</key>
											<string>Is</string>
											<key>VariableValue</key>
											<string>updateMacros</string>
										</dict>
									</array>
									<key>ConditionListMatch</key>
									<string>All</string>
								</dict>
								<key>ElseActions</key>
								<array/>
								<key>MacroActionType</key>
								<string>IfThenElse</string>
								<key>ThenActions</key>
								<array>
									<dict>
										<key>ActionUID</key>
										<integer>15620858</integer>
										<key>IsDefaultApplication</key>
										<true/>
										<key>MacroActionType</key>
										<string>OpenURL</string>
										<key>TimeOutAbortsMacro</key>
										<true/>
										<key>URL</key>
										<string>https://github.com/ognistik/macrowhisper/releases/latest/</string>
									</dict>
									<dict>
										<key>Action</key>
										<string>CancelThisMacro</string>
										<key>ActionUID</key>
										<integer>15620857</integer>
										<key>MacroActionType</key>
										<string>Cancel</string>
									</dict>
								</array>
								<key>TimeOutAbortsMacro</key>
								<true/>
							</dict>
						</array>
						<key>IsActive</key>
						<false/>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>IfThenElse</string>
						<key>ThenActions</key>
						<array>
							<dict>
								<key>ActionUID</key>
								<integer>15620855</integer>
								<key>MacroActionType</key>
								<string>Return</string>
								<key>Text</key>
								<string>1.0.3</string>
							</dict>
						</array>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>Action</key>
						<string>CancelThisMacro</string>
						<key>ActionUID</key>
						<integer>15620859</integer>
						<key>IsActive</key>
						<false/>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>Cancel</string>
					</dict>
					<dict>
						<key>ActionColor</key>
						<string>Orange</string>
						<key>ActionName</key>
						<string>Path to Superwhisper folder - under user's home directory</string>
						<key>ActionUID</key>
						<integer>15611258</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>/Documents/superwhisper</string>
						<key>Variable</key>
						<string>localDir</string>
					</dict>
					<dict>
						<key>ActionColor</key>
						<string>Orange</string>
						<key>ActionName</key>
						<string>Path to FSWatch</string>
						<key>ActionUID</key>
						<integer>15611259</integer>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>/opt/homebrew/bin/fswatch</string>
						<key>Variable</key>
						<string>localFS</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>First, we check if the script and launch agent are correctly setup or not</string>
						<key>ActionUID</key>
						<integer>15611257</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>ExecuteShellScript</string>
						<key>Path</key>
						<string></string>
						<key>Source</key>
						<string>Nothing</string>
						<key>Text</key>
						<string>#!/bin/bash

FILE1="$HOME/macrowhisper/sw-watcher"
FILE2="$HOME/Library/LaunchAgents/com.aft.sw-watcher.plist"

if [[ -f "$FILE1" &amp;&amp; -f "$FILE2" ]]; then
    echo "0"
elif [[ -f "$FILE1" ]]; then
    echo "FSWatch script"
elif [[ -f "$FILE2" ]]; then
    echo "launch agent"
else
    echo "1"
fi</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>localCheck</string>
					</dict>
					<dict>
						<key>ActionName</key>
						<string>Then we present options to the user depending on the current setup</string>
						<key>ActionUID</key>
						<integer>15611264</integer>
						<key>Conditions</key>
						<dict>
							<key>ConditionList</key>
							<array>
								<dict>
									<key>ConditionType</key>
									<string>Variable</string>
									<key>Variable</key>
									<string>localCheck</string>
									<key>VariableConditionType</key>
									<string>IsNot</string>
									<key>VariableValue</key>
									<string>0</string>
								</dict>
							</array>
							<key>ConditionListMatch</key>
							<string>All</string>
						</dict>
						<key>ElseActions</key>
						<array>
							<dict>
								<key>ActionUID</key>
								<integer>15611285</integer>
								<key>DisplayKind</key>
								<string>Variable</string>
								<key>HonourFailureSettings</key>
								<true/>
								<key>IncludeStdErr</key>
								<false/>
								<key>IncludedVariables</key>
								<array>
									<string>9999</string>
								</array>
								<key>IsDisclosed</key>
								<false/>
								<key>MacroActionType</key>
								<string>ExecuteShellScript</string>
								<key>Path</key>
								<string></string>
								<key>Source</key>
								<string>Nothing</string>
								<key>Text</key>
								<string>#!/bin/bash

LAUNCH_AGENT_PATH="$HOME/Library/LaunchAgents/com.aft.sw-watcher.plist"

# Check if the Launch Agent is loaded
if launchctl list | grep -q "com.aft.sw-watcher"; then
    echo "Stop"
else
    echo "Start"
fi</string>
								<key>TimeOutAbortsMacro</key>
								<true/>
								<key>TrimResults</key>
								<true/>
								<key>TrimResultsNew</key>
								<true/>
								<key>UseText</key>
								<true/>
								<key>Variable</key>
								<string>localAction</string>
							</dict>
							<dict>
								<key>ActionUID</key>
								<integer>15611268</integer>
								<key>Asynchronously</key>
								<true/>
								<key>IsDisclosed</key>
								<false/>
								<key>MacroActionType</key>
								<string>ExecuteMacro</string>
								<key>MacroUID</key>
								<string>9F09BD21-DBAC-43A9-8D9B-E244352B520F</string>
								<key>TimeOutAbortsMacro</key>
								<true/>
								<key>UseParameter</key>
								<false/>
							</dict>
							<dict>
								<key>ActionUID</key>
								<integer>15611263</integer>
								<key>Destination</key>
								<string>Variable</string>
								<key>DestinationVariable</key>
								<string>localAction</string>
								<key>IsDisclosed</key>
								<false/>
								<key>MacroActionType</key>
								<string>PromptWithList</string>
								<key>NotifyOnFailure</key>
								<false/>
								<key>NotifyOnTimeOut</key>
								<true/>
								<key>PromptUID</key>
								<string>E0F79B9B-4C8B-4F46-94EF-0582FFDB479D</string>
								<key>Sort</key>
								<false/>
								<key>Source</key>
								<string>Text</string>
								<key>Text</key>
								<string>3__%localAction% the service
2__Reveal log file
1__Uninstall</string>
								<key>TimeOutAbortsMacro</key>
								<false/>
								<key>WindowTitle</key>
								<string>SW Watcher Control</string>
							</dict>
							<dict>
								<key>ActionUID</key>
								<integer>15611286</integer>
								<key>Conditions</key>
								<dict>
									<key>ConditionList</key>
									<array>
										<dict>
											<key>ConditionType</key>
											<string>Variable</string>
											<key>Variable</key>
											<string>localAction</string>
											<key>VariableConditionType</key>
											<string>Is</string>
											<key>VariableValue</key>
											<string>1</string>
										</dict>
									</array>
									<key>ConditionListMatch</key>
									<string>All</string>
								</dict>
								<key>ElseActions</key>
								<array>
									<dict>
										<key>ActionUID</key>
										<integer>15611291</integer>
										<key>Conditions</key>
										<dict>
											<key>ConditionList</key>
											<array>
												<dict>
													<key>ConditionType</key>
													<string>Variable</string>
													<key>Variable</key>
													<string>localAction</string>
													<key>VariableConditionType</key>
													<string>Is</string>
													<key>VariableValue</key>
													<string>2</string>
												</dict>
											</array>
											<key>ConditionListMatch</key>
											<string>All</string>
										</dict>
										<key>ElseActions</key>
										<array>
											<dict>
												<key>ActionUID</key>
												<integer>15611295</integer>
												<key>DisplayKind</key>
												<string>None</string>
												<key>HonourFailureSettings</key>
												<true/>
												<key>IncludeStdErr</key>
												<false/>
												<key>IncludedVariables</key>
												<array>
													<string>9999</string>
												</array>
												<key>MacroActionType</key>
												<string>ExecuteShellScript</string>
												<key>Path</key>
												<string></string>
												<key>Source</key>
												<string>Nothing</string>
												<key>Text</key>
												<string>#!/bin/bash

LAUNCH_AGENT_PATH="$HOME/Library/LaunchAgents/com.aft.sw-watcher.plist"

# Check if the launch agent is currently loaded
if launchctl list | grep -q "com.aft.sw-watcher"; then
    # If loaded, unload it
    launchctl unload "$LAUNCH_AGENT_PATH"
    osascript -e 'display notification "SW Watcher has been stopped" with title "SW Watcher"'
else
    # If not loaded, load it
    launchctl load "$LAUNCH_AGENT_PATH"
    osascript -e 'display notification "SW Watcher is now running" with title "SW Watcher"'
fi</string>
												<key>TimeOutAbortsMacro</key>
												<true/>
												<key>TrimResults</key>
												<true/>
												<key>TrimResultsNew</key>
												<true/>
												<key>UseText</key>
												<true/>
											</dict>
										</array>
										<key>MacroActionType</key>
										<string>IfThenElse</string>
										<key>ThenActions</key>
										<array>
											<dict>
												<key>ActionUID</key>
												<integer>15611292</integer>
												<key>DisplayKind</key>
												<string>None</string>
												<key>HonourFailureSettings</key>
												<true/>
												<key>IncludeStdErr</key>
												<false/>
												<key>IncludedVariables</key>
												<array>
													<string>9999</string>
												</array>
												<key>MacroActionType</key>
												<string>ExecuteShellScript</string>
												<key>Path</key>
												<string></string>
												<key>Source</key>
												<string>Nothing</string>
												<key>Text</key>
												<string>#!/bin/bash

LOG_FILE="/tmp/sw-watcher.log"

# Check if the log file exists
if [ -f "$LOG_FILE" ]; then
    # File exists, reveal in Finder
    open -R "$LOG_FILE"
else
    # File does not exist, show AppleScript notification
    osascript -e 'display notification "The log file does not exist at /tmp/sw-watcher.log" with title "File Not Found"'
fi</string>
												<key>TimeOutAbortsMacro</key>
												<true/>
												<key>TrimResults</key>
												<true/>
												<key>TrimResultsNew</key>
												<true/>
												<key>UseText</key>
												<true/>
											</dict>
										</array>
										<key>TimeOutAbortsMacro</key>
										<true/>
									</dict>
								</array>
								<key>IsDisclosed</key>
								<false/>
								<key>MacroActionType</key>
								<string>IfThenElse</string>
								<key>ThenActions</key>
								<array>
									<dict>
										<key>ActionUID</key>
										<integer>15611287</integer>
										<key>DisplayKind</key>
										<string>None</string>
										<key>HonourFailureSettings</key>
										<true/>
										<key>IncludeStdErr</key>
										<false/>
										<key>IncludedVariables</key>
										<array>
											<string>9999</string>
										</array>
										<key>MacroActionType</key>
										<string>ExecuteShellScript</string>
										<key>Path</key>
										<string></string>
										<key>Source</key>
										<string>Nothing</string>
										<key>Text</key>
										<string>#!/bin/bash

# Unload the launch agent
launchctl unload ~/Library/LaunchAgents/com.aft.sw-watcher.plist 2&gt;/dev/null

# Conditionally delete files only if they exist
[ -f "$HOME/macrowhisper/sw-watcher" ] &amp;&amp; rm -f "$HOME/macrowhisper/sw-watcher"
[ -f "$HOME/Library/LaunchAgents/com.aft.sw-watcher.plist" ] &amp;&amp; rm -f "$HOME/Library/LaunchAgents/com.aft.sw-watcher.plist"

# Conditionally delete the macrowhisper directory and its contents if it exists
[ -d "$HOME/macrowhisper" ] &amp;&amp; rm -rf "$HOME/macrowhisper"

echo "Launch agent unloaded and files deleted successfully."</string>
										<key>TimeOutAbortsMacro</key>
										<true/>
										<key>TrimResults</key>
										<true/>
										<key>TrimResultsNew</key>
										<true/>
										<key>UseText</key>
										<true/>
									</dict>
									<dict>
										<key>ActionUID</key>
										<integer>15611289</integer>
										<key>MacroActionType</key>
										<string>Notification</string>
										<key>SoundName</key>
										<string></string>
										<key>Subtitle</key>
										<string></string>
										<key>Text</key>
										<string>SW Watcher has been completely uninstalled.</string>
										<key>Title</key>
										<string>SW Watcher</string>
									</dict>
								</array>
								<key>TimeOutAbortsMacro</key>
								<true/>
							</dict>
						</array>
						<key>IsDisclosed</key>
						<false/>
						<key>MacroActionType</key>
						<string>IfThenElse</string>
						<key>ThenActions</key>
						<array>
							<dict>
								<key>ActionUID</key>
								<integer>15611271</integer>
								<key>Conditions</key>
								<dict>
									<key>ConditionList</key>
									<array>
										<dict>
											<key>ConditionType</key>
											<string>Variable</string>
											<key>Variable</key>
											<string>localCheck</string>
											<key>VariableConditionType</key>
											<string>Is</string>
											<key>VariableValue</key>
											<string>1</string>
										</dict>
									</array>
									<key>ConditionListMatch</key>
									<string>All</string>
								</dict>
								<key>ElseActions</key>
								<array>
									<dict>
										<key>ActionUID</key>
										<integer>15611277</integer>
										<key>Asynchronously</key>
										<true/>
										<key>IsDisclosed</key>
										<false/>
										<key>MacroActionType</key>
										<string>ExecuteMacro</string>
										<key>MacroUID</key>
										<string>9F09BD21-DBAC-43A9-8D9B-E244352B520F</string>
										<key>TimeOutAbortsMacro</key>
										<true/>
										<key>UseParameter</key>
										<false/>
									</dict>
									<dict>
										<key>ActionUID</key>
										<integer>15611278</integer>
										<key>Buttons</key>
										<array>
											<dict>
												<key>Button</key>
												<string>Continue</string>
												<key>Cancel</key>
												<false/>
											</dict>
											<dict>
												<key>Button</key>
												<string>Cancel</string>
												<key>Cancel</key>
												<true/>
											</dict>
										</array>
										<key>IsDisclosed</key>
										<false/>
										<key>MacroActionType</key>
										<string>PromptForUserInput</string>
										<key>Prompt</key>
										<string>Only the %localCheck% file exists at the correct location. Further action is necessary for SW Watcher to function properly. Please select how you'd like to proceed.</string>
										<key>TimeOutAbortsMacro</key>
										<true/>
										<key>Title</key>
										<string>SW Watcher</string>
										<key>Variables</key>
										<array>
											<dict>
												<key>Default</key>
												<string>Select|Completely Uninstall|Setup Again</string>
												<key>Type</key>
												<string>Menu</string>
												<key>Variable</key>
												<string>localAction</string>
											</dict>
										</array>
									</dict>
									<dict>
										<key>ActionUID</key>
										<integer>15611279</integer>
										<key>Conditions</key>
										<dict>
											<key>ConditionList</key>
											<array>
												<dict>
													<key>ConditionType</key>
													<string>Variable</string>
													<key>Variable</key>
													<string>localAction</string>
													<key>VariableConditionType</key>
													<string>Is</string>
													<key>VariableValue</key>
													<string>Select</string>
												</dict>
											</array>
											<key>ConditionListMatch</key>
											<string>All</string>
										</dict>
										<key>ElseActions</key>
										<array>
											<dict>
												<key>ActionUID</key>
												<integer>15611282</integer>
												<key>DisplayKind</key>
												<string>None</string>
												<key>HonourFailureSettings</key>
												<true/>
												<key>IncludeStdErr</key>
												<false/>
												<key>IncludedVariables</key>
												<array>
													<string>9999</string>
												</array>
												<key>IsDisclosed</key>
												<false/>
												<key>MacroActionType</key>
												<string>ExecuteShellScript</string>
												<key>Path</key>
												<string></string>
												<key>Source</key>
												<string>Nothing</string>
												<key>Text</key>
												<string>#!/bin/bash

# Unload the launch agent
launchctl unload ~/Library/LaunchAgents/com.aft.sw-watcher.plist 2&gt;/dev/null

# Conditionally delete files only if they exist
[ -f "$HOME/macrowhisper/sw-watcher" ] &amp;&amp; rm -f "$HOME/macrowhisper/sw-watcher"
[ -f "$HOME/Library/LaunchAgents/com.aft.sw-watcher.plist" ] &amp;&amp; rm -f "$HOME/Library/LaunchAgents/com.aft.sw-watcher.plist"

# Conditionally delete the macrowhisper directory and its contents if it exists
[ -d "$HOME/macrowhisper" ] &amp;&amp; rm -rf "$HOME/macrowhisper"

echo "Launch agent unloaded and files deleted successfully."</string>
												<key>TimeOutAbortsMacro</key>
												<true/>
												<key>TrimResults</key>
												<true/>
												<key>TrimResultsNew</key>
												<true/>
												<key>UseText</key>
												<true/>
											</dict>
											<dict>
												<key>ActionUID</key>
												<integer>15611281</integer>
												<key>Conditions</key>
												<dict>
													<key>ConditionList</key>
													<array>
														<dict>
															<key>ConditionType</key>
															<string>Variable</string>
															<key>Variable</key>
															<string>localAction</string>
															<key>VariableConditionType</key>
															<string>Is</string>
															<key>VariableValue</key>
															<string>Completely Uninstall</string>
														</dict>
													</array>
													<key>ConditionListMatch</key>
													<string>All</string>
												</dict>
												<key>ElseActionListDisclosed</key>
												<false/>
												<key>ElseActions</key>
												<array/>
												<key>IsDisclosed</key>
												<false/>
												<key>MacroActionType</key>
												<string>IfThenElse</string>
												<key>ThenActions</key>
												<array>
													<dict>
														<key>ActionUID</key>
														<integer>15611284</integer>
														<key>IsDisclosed</key>
														<false/>
														<key>MacroActionType</key>
														<string>Notification</string>
														<key>SoundName</key>
														<string></string>
														<key>Subtitle</key>
														<string></string>
														<key>Text</key>
														<string>SW Watcher has been completely uninstalled.</string>
														<key>Title</key>
														<string>SW Watcher - Setup</string>
													</dict>
													<dict>
														<key>Action</key>
														<string>CancelThisMacro</string>
														<key>ActionUID</key>
														<integer>15611283</integer>
														<key>IsDisclosed</key>
														<false/>
														<key>MacroActionType</key>
														<string>Cancel</string>
													</dict>
												</array>
												<key>TimeOutAbortsMacro</key>
												<true/>
											</dict>
										</array>
										<key>IsDisclosed</key>
										<false/>
										<key>MacroActionType</key>
										<string>IfThenElse</string>
										<key>ThenActions</key>
										<array>
											<dict>
												<key>Action</key>
												<string>CancelThisMacro</string>
												<key>ActionUID</key>
												<integer>15611280</integer>
												<key>MacroActionType</key>
												<string>Cancel</string>
											</dict>
										</array>
										<key>TimeOutAbortsMacro</key>
										<true/>
									</dict>
								</array>
								<key>IsDisclosed</key>
								<false/>
								<key>MacroActionType</key>
								<string>IfThenElse</string>
								<key>ThenActionListDisclosed</key>
								<false/>
								<key>ThenActions</key>
								<array>
									<dict>
										<key>ActionUID</key>
										<integer>15611265</integer>
										<key>Asynchronously</key>
										<true/>
										<key>MacroActionType</key>
										<string>ExecuteMacro</string>
										<key>MacroUID</key>
										<string>9F09BD21-DBAC-43A9-8D9B-E244352B520F</string>
										<key>TimeOutAbortsMacro</key>
										<true/>
										<key>UseParameter</key>
										<false/>
									</dict>
									<dict>
										<key>ActionUID</key>
										<integer>15611272</integer>
										<key>Buttons</key>
										<array>
											<dict>
												<key>Button</key>
												<string>Continue</string>
												<key>Cancel</key>
												<false/>
											</dict>
											<dict>
												<key>Button</key>
												<string>Cancel</string>
												<key>Cancel</key>
												<true/>
											</dict>
										</array>
										<key>MacroActionType</key>
										<string>PromptForUserInput</string>
										<key>Prompt</key>
										<string>Press "Continue" to setup the necessary files for the SW Watcher launch agent service to work properly. Make sure the correct Superwhisper path and FSWatch path have been setup in the KM macro. Service will auto-load after installation.</string>
										<key>TimeOutAbortsMacro</key>
										<true/>
										<key>Title</key>
										<string>SW Watcher</string>
										<key>Variables</key>
										<array/>
									</dict>
								</array>
								<key>TimeOutAbortsMacro</key>
								<true/>
							</dict>
							<dict>
								<key>ActionName</key>
								<string>Create Launch Agent and Script &amp; Runs LaunchAgent</string>
								<key>ActionUID</key>
								<integer>15611269</integer>
								<key>DisplayKind</key>
								<string>None</string>
								<key>HonourFailureSettings</key>
								<true/>
								<key>IncludeStdErr</key>
								<false/>
								<key>IncludedVariables</key>
								<array>
									<string>9999</string>
								</array>
								<key>IsDisclosed</key>
								<false/>
								<key>MacroActionType</key>
								<string>ExecuteShellScript</string>
								<key>Path</key>
								<string></string>
								<key>Source</key>
								<string>Nothing</string>
								<key>Text</key>
								<string>#!/bin/bash

# Validate FSWatch path
FSWATCH_DIR="$KMVAR_localFS"
if [ ! -x "$FSWATCH_DIR" ]; then
    echo "ERROR: FSWatch executable not found at $FSWATCH_DIR"
    osascript -e "display notification \"FSWatch not found at specified path. Please check configuration.\" with title \"SW Watcher\""
    exit 1
fi

# Validate Recordings Directory
if [ ! -d "$HOME$KMVAR_localDir/recordings" ]; then
    echo "ERROR: Recordings directory not found at $HOME$KMVAR_localDir/recordings"
    osascript -e "display notification \"Recordings directory not found. Please check configuration.\" with title \"SW Watcher\""
    exit 1
fi

# Optional: Additional validation for local directory
if [ ! -d "$HOME$KMVAR_localDir" ]; then
    echo "ERROR: Local directory not found at $HOME$KMVAR_localDir"
    osascript -e "display notification \"Superwhisper directory not found. Please check configuration.\" with title \"SW Watcher\""
    exit 1
fi

# Ensure LaunchAgents directory exists
if [ ! -d "$HOME/Library/LaunchAgents" ]; then
    mkdir -p "$HOME/Library/LaunchAgents"
fi

# Ensure macrowhisper directory exists
if [ ! -d "$HOME/macrowhisper" ]; then
    mkdir -p "$HOME/macrowhisper"
fi

# Create a plist file for the LaunchAgent
cat &gt; ~/Library/LaunchAgents/com.aft.sw-watcher.plist &lt;&lt; EOF
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;com.aft.sw-watcher&lt;/string&gt;
    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;$HOME/macrowhisper/sw-watcher&lt;/string&gt;
    &lt;/array&gt;
    &lt;key&gt;RunAtLoad&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;KeepAlive&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;ThrottleInterval&lt;/key&gt;
    &lt;integer&gt;60&lt;/integer&gt;
&lt;/dict&gt;
&lt;/plist&gt;
EOF

# Create the watcher script
cat &gt; $HOME/macrowhisper/sw-watcher &lt;&lt; EOF
#!/bin/bash

RECORDINGS_DIR="$HOME$KMVAR_localDir/recordings"
FSWATCH_DIR="$KMVAR_localFS"
LAST_PROCESSED=""
LOG_FILE="/tmp/sw-watcher.log"
MAX_LOG_SIZE_MB=5

# Function to rotate log file if it gets too large
rotate_log() {
    local log_size_kb=\$(du -k "\$LOG_FILE" 2&gt;/dev/null | cut -f1)
    
    if [ -n "\$log_size_kb" ] &amp;&amp; [ "\$log_size_kb" -gt \$((MAX_LOG_SIZE_MB * 1024)) ]; then
        mv "\$LOG_FILE" "\${LOG_FILE}.old"
        touch "\$LOG_FILE"
        echo "\$(date): Log file rotated due to size" &gt;&gt; "\$LOG_FILE"
    fi
}

touch "\$LOG_FILE"
echo "\$(date): FSWatch monitoring service started" &gt;&gt; "\$LOG_FILE"

# Function to check if fswatch is installed
check_fswatch() {
    if ! command -v \$FSWATCH_DIR &amp;&gt; /dev/null; then
        echo "\$(date): ERROR - fswatch not found. Please install it with 'brew install fswatch'" &gt;&gt; "\$LOG_FILE"
        osascript -e "display notification \"fswatch not found. Please install it with 'brew install fswatch'\" with title \"SW Watcher\""
        exit 1
    fi
}

# Function to check if the recordings directory exists
check_recordings_dir() {
    if [ ! -d "\$RECORDINGS_DIR" ]; then
        # Directory doesn't exist, notify user and exit
        osascript -e "display notification \"Recordings directory not found at \$RECORDINGS_DIR. Monitoring stopped.\" with title \"SW Watcher\""
        echo "\$(date): ERROR - Recordings directory not found at \$RECORDINGS_DIR. Exiting." &gt;&gt; "\$LOG_FILE"
        exit 1
    fi
}

# Check dependencies and directory before starting
check_recordings_dir
check_fswatch
rotate_log

# Set up error handling
trap '
    error_line=\$LINENO
    echo "\$(date): ERROR - Script has quit on line \$error_line" &gt;&gt; "\$LOG_FILE"
    [ -n "$heartbeat_pid" ] &amp;&amp; kill "$heartbeat_pid" 2&gt;/dev/null
    exit 1
' ERR

# Normal termination trap
trap '
    echo "\$(date): INFO - Script received termination signal" &gt;&gt; "\$LOG_FILE"
    [ -n "$heartbeat_pid" ] &amp;&amp; kill "$heartbeat_pid" 2&gt;/dev/null
    exit 0
' SIGINT SIGTERM EXIT

# Function to process new meta.json files
process_meta_json() {
    local file="\$1"
    local event_type="\$2"
    local parent_dir=\$(dirname "\$file")
    
    # Record this as the most recently processed file
    LAST_PROCESSED="\$file"
    
    echo "\$(date): \$event_type event for meta.json in \$parent_dir" &gt;&gt; "\$LOG_FILE"
    
    if [ "\$event_type" = "Created" ] || [ "\$event_type" = "Updated" ]; then
        if [ -f "\$file" ]; then
            # Your processing logic here
            echo "\$(date): Processing meta.json in \$parent_dir" &gt;&gt; "\$LOG_FILE"
            # Add your specific processing commands
            osascript -e "tell application \"Keyboard Maestro Engine\" to do script \"Trigger - Meta\"" &gt; /dev/null 2&gt;&amp;1 &amp;
        fi
    fi
}

# Create a heartbeat function to check if monitoring is still running
(
    while true; do
        sleep 3600  # Check every hour
        if [ ! -d "\$RECORDINGS_DIR" ]; then
            echo "\$(date): WARNING - Recordings directory no longer exists during hourly check" &gt;&gt; "\$LOG_FILE"
            osascript -e "display notification \"Recordings directory no longer exists. Monitoring stopped.\" with title \"SW Watcher\""
            # Exit the entire script
            kill \$\$ # This kills the parent process
            exit 1
        else
            echo "\$(date): INFO - Monitoring heartbeat, service is running" &gt;&gt; "\$LOG_FILE"
        fi
        rotate_log
    done
) &amp;
heartbeat_pid=\$!

# Main fswatch process
{
    \$FSWATCH_DIR -0 -x --latency 0.1 -event Created -event AttributeModified -e ".*" -i "meta\.json\$" "\$RECORDINGS_DIR" | while IFS= read -r -d '' line; do
        # Log the full line to understand what fswatch is reporting - Leaving here for debugging
        # echo "\$(date): Full fswatch line: \$line" &gt;&gt; /tmp/meta-json-debug.log
        
        # Extract the file path and event flags
        file=\$(echo "\$line" | awk '{print \$1}')
        event_flags=\$(echo "\$line" | awk '{\$1=""; print \$0}' | xargs)
        
        # More robust event type detection
        event_type=""
        if [[ "\$event_flags" == *"Created"* &amp;&amp; "\$event_flags" != *"AttributeModified"* &amp;&amp; "\$event_flags" != *"Removed"* ]]; then
            event_type="Created"
        elif [[ "\$event_flags" == *"AttributeModified"* &amp;&amp; "\$event_flags" != *"Removed"* ]]; then
            event_type="Updated"
        else
            event_type="Unknown"
        fi
        
        # Log the parsed event details - Leaving here for debugging
        # echo "\$(date): File: \$file, Event: \$event_type, Flags: \$event_flags" &gt;&gt; /tmp/meta-json-debug.log
        
        # Only process if it's the most recent meta.json or a new one
        if [ "\$file" != "\$LAST_PROCESSED" ] || [ "\$event_type" = "Updated" ]; then
            process_meta_json "\$file" "\$event_type"
        fi
    done
} || {
    # This block runs if fswatch fails
    echo "\$(date): ERROR - FSWatch command failed unexpectedly" &gt;&gt; "\$LOG_FILE"
    osascript -e "display notification \"FSWatch monitoring failed unexpectedly. Check the logs.\" with title \"SW Watcher\""
}
EOF

# Make the script executable
chmod +x $HOME/macrowhisper/sw-watcher

# Load the LaunchAgent
launchctl load ~/Library/LaunchAgents/com.aft.sw-watcher.plist

echo "SW Watcher service installed and started!"
osascript -e "display notification \"SW Watcher service installed and started!\" with title \"SW Watcher\""
echo "To stop the service: launchctl unload ~/Library/LaunchAgents/com.aft.sw-watcher.plist"
echo "To check logs: cat /tmp/sw-watcher.log"</string>
								<key>TimeOutAbortsMacro</key>
								<true/>
								<key>TrimResults</key>
								<true/>
								<key>TrimResultsNew</key>
								<true/>
								<key>UseText</key>
								<true/>
							</dict>
						</array>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>766286765.598647</real>
				<key>CustomIconData</key>
				<string>KMEC=Rounded=KMCOLOR:0,0,255,0=🔮=86=0=0=1=KMCOLOR:0,0,0,255</string>
				<key>ModificationDate</key>
				<real>770608026.12608004</real>
				<key>Name</key>
				<string>Setup - Service</string>
				<key>Triggers</key>
				<array>
					<dict>
						<key>AutoRun</key>
						<false/>
						<key>Display</key>
						<string>The Service</string>
						<key>MacroTriggerType</key>
						<string>GroupStatusMenu</string>
					</dict>
				</array>
				<key>UID</key>
				<string>22F51991-8A2A-4018-9008-BC489B91DA9B</string>
			</dict>
		</array>
		<key>Name</key>
		<string>MW</string>
		<key>ToggleMacroUID</key>
		<string>8BE8168C-8722-4B74-A85E-61F8CF9AF140</string>
		<key>UID</key>
		<string>22DB61C0-9E47-48DF-86EB-9B78B134C2F1</string>
	</dict>
</array>
</plist>
